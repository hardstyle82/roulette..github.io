document.addEventListener('DOMContentLoaded', function() {
    // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
    const wheel = document.getElementById('wheel');
    const spinBtn = document.getElementById('spinBtn');
    const spinSound = document.getElementById('spinSound');
    const getStarsBtn = document.getElementById('getStarsBtn');
    const progressBar = document.getElementById('progressBar');
    const starsCount = document.getElementById('starsCount');
    const dailyBtn = document.getElementById('dailyBtn');
    const dailyTimer = document.getElementById('dailyTimer');
    const referralLink = document.getElementById('referralLink');
    const copyBtn = document.getElementById('copyBtn');
    const winnersChat = document.getElementById('winnersChat');
    const countdownTimer = document.getElementById('countdownTimer');
    const participateBtn = document.querySelector('.participate-btn');
    const levelsContainer = document.getElementById('levelsContainer');
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä—É–ª–µ—Ç–∫–∏
    const sectors = [
        { stars: 5, icon: '‚≠ê', color: '' },
        { stars: 10, icon: '‚≠ê', color: '' },
        { stars: 15, icon: '‚≠ê', color: '' },
        { stars: 20, icon: '‚≠ê', color: '' },
        { stars: 25, icon: '‚≠ê', color: '' },
        { stars: 30, icon: '‚≠ê', color: '' },
        { stars: 40, icon: '‚≠ê', color: '' },
        { stars: 50, icon: '‚≠ê', color: '' },
        { stars: 0, icon: 'üîÑ', color: 'wheel-sector-spin-again', text: '–ï—â—ë —Ä–∞–∑' },
        { stars: 0, icon: 'üîÑ', color: 'wheel-sector-spin-again', text: '–ï—â—ë —Ä–∞–∑' },
        { stars: 0, icon: 'üîÑ', color: 'wheel-sector-spin-again', text: '–ï—â—ë —Ä–∞–∑' },
        { stars: 0, icon: 'üëë', color: 'wheel-sector-premium', text: '–ü—Ä–µ–º–∏—É–º' }
    ];
    
    // –£—Ä–æ–≤–Ω–∏ –∏–≥—Ä–æ–∫–∞
    const levels = [
        { stars: 100, name: '–ù–æ–≤–∏—á–æ–∫', reward: '10 –∑–≤—ë–∑–¥' },
        { stars: 300, name: '–ò–≥—Ä–æ–∫', reward: '25 –∑–≤—ë–∑–¥' },
        { stars: 600, name: '–ü—Ä–æ—Ñ–∏', reward: '50 –∑–≤—ë–∑–¥' },
        { stars: 1000, name: '–≠–∫—Å–ø–µ—Ä—Ç', reward: '100 –∑–≤—ë–∑–¥' },
        { stars: 2000, name: '–ú–∞—Å—Ç–µ—Ä', reward: '200 –∑–≤—ë–∑–¥' }
    ];
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    let totalStars = 0;
    let canSpin = true;
    let spinTimeout = null;
    let winnersUpdateInterval = null;
    let countdownInterval = null;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initWheel();
    updateStarsUI();
    initLiveChat();
    setupReferralLink();
    checkDailyBonus();
    startCountdown();
    initLevels();
    requestNotificationPermission();
    
    // –°–æ–±—ã—Ç–∏—è
    spinBtn.addEventListener('click', spinWheel);
    getStarsBtn.addEventListener('click', function() {
        window.open('https://www.youtube.com/@madnessgames_?sub_confirmation=1', '_blank');
    });
    dailyBtn.addEventListener('click', claimDailyBonus);
    copyBtn.addEventListener('click', copyReferralLink);
    participateBtn.addEventListener('click', participateInDraw);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–∏–º–∏—Ç–∞—Ü–∏—è)
    setTimeout(() => {
        spinBtn.disabled = false;
    }, 3000);
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    function initWheel() {
        wheel.innerHTML = '';
        const sectorAngle = 360 / sectors.length;
        
        sectors.forEach((sector, index) => {
            const sectorElement = document.createElement('div');
            sectorElement.className = `wheel-sector ${sector.color || ''}`;
            sectorElement.style.transform = `rotate(${sectorAngle * index}deg)`;
            
            const sectorContent = document.createElement('div');
            sectorContent.className = 'wheel-sector-content';
            
            const sectorIcon = document.createElement('div');
            sectorIcon.className = 'wheel-sector-icon';
            sectorIcon.textContent = sector.icon;
            
            const sectorStars = document.createElement('div');
            sectorStars.textContent = sector.stars > 0 ? sector.stars : '';
            
            sectorContent.appendChild(sectorIcon);
            sectorContent.appendChild(sectorStars);
            sectorElement.appendChild(sectorContent);
            wheel.appendChild(sectorElement);
        });
    }
    
    function spinWheel() {
        if (!canSpin) return;
        
        canSpin = false;
        spinBtn.disabled = true;
        
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞
        spinSound.currentTime = 0;
        spinSound.play();
        
        // –°–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–æ—Ä–æ—Ç–æ–≤ (4-7)
        const spinDegrees = 360 * getRandomInt(4, 7) + getRandomInt(0, 360);
        
        // –í—Ä–∞—â–µ–Ω–∏–µ —Ä—É–ª–µ—Ç–∫–∏
        wheel.style.transform = `rotate(${-spinDegrees}deg)`;
        
        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Ä–∞—â–µ–Ω–∏—è
        setTimeout(() => {
            const sectorAngle = 360 / sectors.length;
            const normalizedDegree = spinDegrees % 360;
            const winningSectorIndex = Math.floor(normalizedDegree / sectorAngle);
            const winningSector = sectors[winningSectorIndex];
            
            spinSound.pause();
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞
            handleWin(winningSector);
            
            // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤—Ä–∞—â–µ–Ω–∏–µ–º
            if (winningSector.icon === 'üîÑ') {
                // –ï—Å–ª–∏ "–í—Ä–∞—â–∞—Ç—å –µ—â—ë", —Å—Ä–∞–∑—É —Ä–∞–∑—Ä–µ—à–∞–µ–º –Ω–æ–≤–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ
                canSpin = true;
                spinBtn.disabled = false;
            } else {
                // –û–±—ã—á–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à - –∂–¥–µ–º 25 —Å–µ–∫—É–Ω–¥
                spinTimeout = setTimeout(() => {
                    canSpin = true;
                    spinBtn.disabled = false;
                }, 25000);
            }
        }, 4000);
    }
    
    function handleWin(sector) {
        let winText = '';
        
        if (sector.icon === '‚≠ê') {
            totalStars += sector.stars;
            winText = `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${sector.stars} –∑–≤—ë–∑–¥!`;
            updateStarsUI();
            showConfetti();
            checkLevelUp();
        } else if (sector.icon === 'üëë') {
            winText = '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –ü—Ä–µ–º–∏—É–º Telegram!';
            showConfetti(true);
        } else if (sector.icon === 'üîÑ') {
            winText = '–í—Ä–∞—â–∞–π—Ç–µ –µ—â—ë —Ä–∞–∑!';
        }
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —á–∞—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
        addToWinnersChat(winText);
        
        // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        showCustomAlert(winText);
    }
    
    function updateStarsUI() {
        starsCount.textContent = `${totalStars} –∑–≤—ë–∑–¥`;
        const progress = Math.min((totalStars / 555) * 100, 100);
        progressBar.style.width = `${progress}%`;
        
        // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 555 –∑–≤—ë–∑–¥
        getStarsBtn.disabled = totalStars < 555;
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É—Ä–æ–≤–Ω–µ–π
        updateLevelsProgress();
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ–∏—á
    
    function initLevels() {
        const levelsHTML = levels.map(level => `
            <div class="level-item">
                <div class="level-circle">${level.stars}</div>
                <div class="level-info">
                    <div>${level.name}</div>
                    <div>+${level.reward}</div>
                </div>
            </div>
        `).join('');
        
        levelsContainer.innerHTML = `
            <h3>–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å</h3>
            <div class="level-progress">
                ${levelsHTML}
            </div>
        `;
        
        updateLevelsProgress();
    }
    
    function updateLevelsProgress() {
        const levelCircles = document.querySelectorAll('.level-circle');
        const currentLevelIndex = levels.findIndex(level => totalStars < level.stars);
        
        levelCircles.forEach((circle, index) => {
            if (index < currentLevelIndex) {
                circle.classList.add('reached');
            } else {
                circle.classList.remove('reached');
            }
        });
    }
    
    function checkLevelUp() {
        const reachedLevels = levels.filter(level => totalStars >= level.stars);
        const lastReached = reachedLevels[reachedLevels.length - 1];
        
        if (lastReached && !localStorage.getItem(`level_${lastReached.stars}_rewarded`)) {
            showCustomAlert(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è "${lastReached.name}" –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ ${lastReached.reward}!`);
            localStorage.setItem(`level_${lastReached.stars}_rewarded`, 'true');
        }
    }
    
    function startCountdown() {
        let seconds = 3600; // 1 —á–∞—Å
        
        function update() {
            const hours = Math.floor(seconds / 3600);
            const minutes = Math.floor((seconds % 3600) / 60);
            const secs = seconds % 60;
            
            countdownTimer.textContent = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
            
            if (seconds <= 0) {
                clearInterval(countdownInterval);
                countdownTimer.textContent = "00:00:00";
                setTimeout(startCountdown, 1000); // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
            } else {
                seconds--;
            }
        }
        
        update();
        countdownInterval = setInterval(update, 1000);
    }
    
    function participateInDraw() {
        if (totalStars >= 100) {
            totalStars -= 100;
            updateStarsUI();
            showCustomAlert("–í—ã —É—Å–ø–µ—à–Ω–æ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ 1000 –∑–≤—ë–∑–¥!");
        } else {
            showCustomAlert("–î–ª—è —É—á–∞—Å—Ç–∏—è –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 100 –∑–≤—ë–∑–¥");
        }
    }
    
    function initLiveChat() {
        // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —á–∞—Ç–∞
        for (let i = 0; i < 5; i++) {
            addToWinnersChat(generateRandomWinMessage());
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞ –∫–∞–∂–¥—ã–µ 2-6 —Å–µ–∫—É–Ω–¥
        setInterval(() => {
            if (Math.random() > 0.3) { // 70% —à–∞–Ω—Å –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                addToWinnersChat(generateRandomWinMessage());
            }
        }, getRandomInt(2000, 6000));
    }
    
    function addToWinnersChat(message) {
        const now = new Date();
        const timeString = now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        
        const messageElement = document.createElement('div');
        messageElement.className = 'chat-message';
        messageElement.innerHTML = `
            <span class="chat-time">${timeString}</span>
            <span class="chat-name">${generateRandomName()}:</span>
            <span class="chat-prize">${message}</span>
        `;
        
        winnersChat.prepend(messageElement);
        
        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        if (winnersChat.children.length > 20) {
            winnersChat.removeChild(winnersChat.lastChild);
        }
    }
    
    function generateRandomWinMessage() {
        const prizes = [
            '–≤—ã–∏–≥—Ä–∞–ª 5 –∑–≤—ë–∑–¥', '–≤—ã–∏–≥—Ä–∞–ª 10 –∑–≤—ë–∑–¥', '–≤—ã–∏–≥—Ä–∞–ª 20 –∑–≤—ë–∑–¥', 
            '–≤—ã–∏–≥—Ä–∞–ª 50 –∑–≤—ë–∑–¥', '–ø–æ–ª—É—á–∏–ª –ü—Ä–µ–º–∏—É–º', '–∫—Ä—É—Ç–∏—Ç –µ—â—ë —Ä–∞–∑'
        ];
        return prizes[Math.floor(Math.random() * prizes.length)];
    }
    
    function generateRandomName() {
        const names = ['–ê–ª–µ–∫—Å–µ–π', '–ú–∞—Ä–∏—è', '–ò–≤–∞–Ω', '–ï–ª–µ–Ω–∞', '–î–º–∏—Ç—Ä–∏–π', '–û–ª—å–≥–∞', '–°–µ—Ä–≥–µ–π', '–ê–Ω–Ω–∞'];
        const suffixes = ['123', 'X', 'Pro', '2023', 'Winner', 'King', 'Queen'];
        return `${names[Math.floor(Math.random() * names.length)]}${suffixes[Math.floor(Math.random() * suffixes.length)]}`;
    }
    
    function requestNotificationPermission() {
        if (!("Notification" in window)) return;
        
        if (Notification.permission !== "granted" && Notification.permission !== "denied") {
            setTimeout(() => {
                Notification.requestPermission().then(permission => {
                    if (permission === "granted") {
                        new Notification("–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ!", {
                            body: "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–æ–Ω—É—Å–∞—Ö –∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö!",
                            icon: "images/icon.png"
                        });
                    }
                });
            }, 10000); // –ó–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        }
    }
    
    function showCustomAlert(message) {
        // –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∫—Ä–∞—Å–∏–≤—ã–π –ø–æ–ø–∞–ø
        alert(message);
        
        // –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏ —Ç–∞–º
        if (Notification.permission === "granted") {
            new Notification("–†—É–ª–µ—Ç–∫–∞: –Ω–æ–≤—ã–π –≤—ã–∏–≥—Ä—ã—à!", {
                body: message,
                icon: "images/icon.png"
            });
        }
    }
    
    // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (showConfetti, setupReferralLink, copyReferralLink, 
    // checkDailyBonus, updateDailyTimer, claimDailyBonus, getRandomInt) 
    // –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏
    
    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
    window.addEventListener('beforeunload', () => {
        if (spinTimeout) clearTimeout(spinTimeout);
        if (winnersUpdateInterval) clearInterval(winnersUpdateInterval);
        if (countdownInterval) clearInterval(countdownInterval);
    });
});